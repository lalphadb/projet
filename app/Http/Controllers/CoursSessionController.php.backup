<?php

namespace App\Http\Controllers;

use App\Models\CoursSession;
use App\Models\Ecole;
use App\Models\Cours;
use App\Models\CoursHoraire;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\DB;
use Carbon\Carbon;

class CoursSessionController extends Controller
{
    /**
     * Affiche la liste des sessions
     */
    public function index(Request $request)
    {
        $user = Auth::user();
        
        // Query de base avec les relations
        $query = CoursSession::with(['ecole', 'cours', 'cours.inscriptions'])
            ->withCount('cours');
        
        // Filtre par √©cole pour admin
        if ($user->role !== 'superadmin') {
            $query->where('ecole_id', $user->ecole_id);
        }
        
        // Filtres suppl√©mentaires
        if ($request->filled('ecole_id') && $request->ecole_id !== 'all') {
            $query->where('ecole_id', $request->ecole_id);
        }
        
        if ($request->filled('annee') && $request->annee !== 'all') {
            $query->whereYear('date_debut', $request->annee)
                  ->orWhereYear('date_fin', $request->annee);
        }
        
        if ($request->filled('saison') && $request->saison !== 'all') {
            $query->where('nom', 'like', '%' . ucfirst($request->saison) . '%');
        }
        
        // Tri
        $sortField = $request->get('sort', 'date_debut');
        $sortDirection = $request->get('direction', 'desc');
        $query->orderBy($sortField, $sortDirection);
        
        $sessions = $query->paginate(10);
        
        // Donn√©es pour filtres
        $ecoles = $user->role === 'superadmin' 
            ? Ecole::orderBy('nom')->get() 
            : collect();
        
        return view('cours.sessions.index', compact('sessions', 'ecoles'));
    }

    /**
     * Affiche le formulaire de cr√©ation d'une session
     */
    public function create()
    {
        return view('cours.sessions.create');
    }

    /**
     * Enregistre une nouvelle session
     */
    public function store(Request $request)
    {
        $user = Auth::user();
        
        $request->validate([
            'nom' => 'required|string|max:255',
            'mois' => 'nullable|string|max:50',
            'date_debut' => 'required|date',
            'date_fin' => 'required|date|after:date_debut',
            'description' => 'nullable|string',
            'activer_inscriptions' => 'nullable|boolean',
            'visible_public' => 'nullable|boolean',
            'date_limite_inscription' => 'nullable|date',
            'couleur' => 'nullable|string|max:7',
        ]);
        
        $session = new CoursSession();
        $session->nom = $request->nom;
        $session->mois = $request->mois;
        $session->date_debut = $request->date_debut;
        $session->date_fin = $request->date_fin;
        $session->description = $request->description;
        $session->inscriptions_actives = $request->activer_inscriptions ?? true;
        $session->visible = $request->visible_public ?? true;
        $session->date_limite_inscription = $request->date_limite_inscription;
        $session->couleur = $request->couleur;
        $session->ecole_id = $user->ecole_id;
        $session->save();
        
        Log::info("Session cr√©√©e : {$session->nom} par user #{$user->id}");
        
        return redirect()->route('cours.sessions.index')->with('success', 'Session cr√©√©e avec succ√®s.');
    }

    /**
     * Affiche les d√©tails d'une session
     */
    public function show(CoursSession $session)
    {
        $user = Auth::user();
        
        if ($user->role !== 'superadmin' && $session->ecole_id !== $user->ecole_id) {
            abort(403);
        }
        
        $session->load(['ecole', 'cours.horaires', 'cours.inscriptions']);
        
        // Donn√©es statistiques
        $totalInscrits = $session->cours->sum(function($cours) {
            return $cours->inscriptions->count();
        });
        
        $totalPlaces = $session->cours->sum('places_max');
        $tauxRemplissage = $totalPlaces > 0 ? round(($totalInscrits / $totalPlaces) * 100) : 0;
        
        return view('cours.sessions.show', compact('session', 'totalInscrits', 'tauxRemplissage'));
    }

    /**
     * Affiche le formulaire d'√©dition
     */
    public function edit(CoursSession $session)
    {
        $user = Auth::user();
        
        if ($user->role !== 'superadmin' && $session->ecole_id !== $user->ecole_id) {
            abort(403);
        }
        
        return view('cours.sessions.edit', compact('session'));
    }

    /**
     * Met √† jour une session
     */
    public function update(Request $request, CoursSession $session)
    {
        $user = Auth::user();
        
        if ($user->role !== 'superadmin' && $session->ecole_id !== $user->ecole_id) {
            abort(403);
        }
        
        $request->validate([
            'nom' => 'required|string|max:255',
            'mois' => 'nullable|string|max:50',
            'date_debut' => 'required|date',
            'date_fin' => 'required|date|after:date_debut',
            'description' => 'nullable|string',
            'activer_inscriptions' => 'nullable|boolean',
            'visible_public' => 'nullable|boolean',
            'date_limite_inscription' => 'nullable|date',
            'couleur' => 'nullable|string|max:7',
        ]);
        
        $session->update([
            'nom' => $request->nom,
            'mois' => $request->mois,
            'date_debut' => $request->date_debut,
            'date_fin' => $request->date_fin,
            'description' => $request->description,
            'inscriptions_actives' => $request->activer_inscriptions ?? true,
            'visible' => $request->visible_public ?? true,
            'date_limite_inscription' => $request->date_limite_inscription,
            'couleur' => $request->couleur,
        ]);
        
        Log::info("Session modifi√©e : {$session->nom} par user #{$user->id}");
        
        return redirect()->route('cours.sessions.index')->with('success', 'Session modifi√©e avec succ√®s.');
    }

    /**
     * Supprime une session
     */
    public function destroy(CoursSession $session)
    {
        $user = Auth::user();
        
        if ($user->role !== 'superadmin' && $session->ecole_id !== $user->ecole_id) {
            abort(403);
        }
        
        // V√©rifier si des cours sont li√©s
        if ($session->cours()->exists()) {
            return back()->with('error', 'Impossible de supprimer cette session car elle contient des cours.');
        }
        
        $session->delete();
        
        Log::info("Session supprim√©e : {$session->nom} par user #{$user->id}");
        
        return redirect()->route('cours.sessions.index')->with('success', 'Session supprim√©e avec succ√®s.');
    }

    /**
     * üÜï NOUVEAU : Duplique une session avec tous ses cours et horaires
     */
    public function dupliquer(Request $request, CoursSession $session)
    {
        $user = Auth::user();
        
        if ($user->role !== 'superadmin' && $session->ecole_id !== $user->ecole_id) {
            abort(403);
        }
        
        $request->validate([
            'nouveau_nom' => 'required|string|max:255',
            'nouveau_mois' => 'nullable|string|max:50',
            'nouvelle_date_debut' => 'required|date',
            'nouvelle_date_fin' => 'required|date|after:nouvelle_date_debut',
            'copier_cours' => 'nullable|boolean',
            'activer_reinscriptions' => 'nullable|boolean',
        ]);

        DB::beginTransaction();
        try {
            // Cr√©er la nouvelle session
            $nouvelleSession = CoursSession::create([
                'ecole_id' => $session->ecole_id,
                'nom' => $request->nouveau_nom,
                'mois' => $request->nouveau_mois,
                'date_debut' => $request->nouvelle_date_debut,
                'date_fin' => $request->nouvelle_date_fin,
                'description' => $session->description,
                'inscriptions_actives' => $request->activer_reinscriptions ?? false,
                'visible' => true,
                'couleur' => $session->couleur,
            ]);

            $coursCreates = 0;
            
            // Copier tous les cours si demand√©
            if ($request->copier_cours) {
                foreach ($session->cours as $cours) {
                    // Dupliquer le cours
                    $nouveauCours = Cours::create([
                        'nom' => $cours->nom,
                        'description' => $cours->description,
                        'session_id' => $nouvelleSession->id,
                        'ecole_id' => $cours->ecole_id,
                        'instructeur' => $cours->instructeur,
                        'niveau' => $cours->niveau,
                        'tarif' => $cours->tarif,
                        'places_max' => $cours->places_max,
                        'jours' => $cours->jours,
                        'heure_debut' => $cours->heure_debut,
                        'heure_fin' => $cours->heure_fin,
                        'plages_horaires' => $cours->plages_horaires,
                        'statut' => 'actif',
                        'visible' => true,
                    ]);
                    
                    $coursCreates++;
                }
            }

            DB::commit();
            
            Log::info("Session dupliqu√©e : {$session->nom} vers {$nouvelleSession->nom} avec {$coursCreates} cours par user #{$user->id}");
            
            return redirect()->route('cours.sessions.show', $nouvelleSession)
                ->with('success', "Session dupliqu√©e avec succ√®s ! {$coursCreates} cours ont √©t√© copi√©s.");
                
        } catch (\Exception $e) {
            DB::rollback();
            Log::error("Erreur duplication session : " . $e->getMessage());
            return back()->with('error', 'Erreur lors de la duplication de la session.');
        }
    }

    /**
     * üÜï NOUVEAU : Active les r√©inscriptions pour une session
     */
    public function activerReinscriptions(CoursSession $session)
    {
        $user = Auth::user();
        
        if ($user->role !== 'superadmin' && $session->ecole_id !== $user->ecole_id) {
            abort(403);
        }
        
        $session->update(['inscriptions_actives' => true]);
        
        Log::info("R√©inscriptions activ√©es pour session {$session->nom} par user #{$user->id}");
        
        return back()->with('success', 'R√©inscriptions activ√©es ! Les membres peuvent maintenant se r√©inscrire.');
    }

    /**
     * üÜï NOUVEAU : Ferme les r√©inscriptions pour une session
     */
    public function fermerReinscriptions(CoursSession $session)
    {
        $user = Auth::user();
        
        if ($user->role !== 'superadmin' && $session->ecole_id !== $user->ecole_id) {
            abort(403);
        }
        
        $session->update(['inscriptions_actives' => false]);
        
        Log::info("R√©inscriptions ferm√©es pour session {$session->nom} par user #{$user->id}");
        
        return back()->with('success', 'R√©inscriptions ferm√©es pour cette session.');
    }
}
